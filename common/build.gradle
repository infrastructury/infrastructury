plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}

architectury {
    common(rootProject.builds_for.split(","))
}

loom {
    accessWidenerPath = file("src/main/resources/omniplay.accesswidener")
}

configurations {
    compile
    mappings
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "${rootProject.architectury_group}:architectury:${rootProject.architectury_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modApi("com.terraformersmc:modmenu:${rootProject.modmenu_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
}

task printJarPath {
    dependsOn(tasks.withType(JavaCompile))
    doLast {
        configurations.compile.each { File jar ->
            println "Jar path: $jar"
        }
    }
}

tasks.register('applyMappings', JavaExec) {
    System.out.println("apply mappings")
//    project.configurations.getByName('compileClasspath').files.find {
//        println it.path
//    }
    classpath configurations.runtimeClasspath
    main 'your.mapping.tool.MainClass'
    args 'arch.jar', 'arch-remapped.jar', "arch_${rootProject.minecraft_version}.txt"
}

tasks.named('build') {
    dependsOn applyMappings

    doLast {
        configurations.getByName("compileClasspath").files.find {
            println it.path
        }

        // Get the current classpath
        def currentClasspath = sourceSets.main.compileClasspath

        // Print the current classpath
        println "Current Compile Classpath: $currentClasspath"

        // Listen for changes in the classpath
        sourceSets.main.compileClasspath.addChangeListener { newClasspath ->
            // Print the new classpath when changes are detected
            println "Classpath Change Detected! New Compile Classpath: $newClasspath"
        }
    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
